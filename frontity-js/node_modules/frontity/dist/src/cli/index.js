#! /usr/bin/env node
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsNode = __importStar(require("ts-node"));
tsNode.register({
    transpileOnly: true,
    compilerOptions: {
        // Target latest version of ECMAScript.
        target: "es2017",
        // Search under node_modules for non-relative imports.
        moduleResolution: "node",
        // commonjs modules.
        module: "commonjs",
        // Allow default imports from modules with no default export.
        allowSyntheticDefaultImports: true,
        // Don't emit; allow Babel to transform files.
        noEmit: true,
        // Import non-ES modules as default imports.
        esModuleInterop: true,
        // Resolve JSON files.
        resolveJsonModule: true,
        // Support for JSX.
        jsx: "react",
        // Transpile JS as well.
        allowJs: true,
    },
});
const commander_1 = __importDefault(require("commander"));
const commands_1 = require("../commands");
const create_1 = __importDefault(require("./create"));
const create_package_1 = __importDefault(require("./create-package"));
const subscribe_1 = __importDefault(require("./subscribe"));
const unknown_1 = __importDefault(require("./unknown"));
const info_1 = __importDefault(require("./info"));
const package_json_1 = __importDefault(require("../../package.json"));
// Sets the version and the description of the program.
commander_1.default
    .version(package_json_1.default.version)
    .usage("<command> [options]")
    .description("Frontity CLI");
// Registers a `create` command that takes an optional
// parameter called `name`. It also accepts the following
// options: --typescript, --use-cwd.
commander_1.default
    .command("create [name]")
    .option("-h, --theme <theme>", "The theme to use")
    .option("-t, --typescript", "Adds support for TypeScript")
    .option("-c, --use-cwd", "Generates the project in the current directory.")
    .option("-n, --no-prompt", "Skips prompting the user for options")
    .description("Creates a new Frontity project.")
    .action((name, _a) => {
    var args = __rest(_a, []);
    return create_1.default(Object.assign({ name }, args));
});
commander_1.default
    .command("create-package [name]")
    .option("-n, --namespace <value>", "Sets the namespace for this package")
    .option("--no-prompt", "Skips prompting the user for options")
    .description("Creates a new Frontity package in a project.")
    .action((name, _a) => {
    var args = __rest(_a, []);
    return create_package_1.default(Object.assign({ name }, args));
});
commander_1.default
    .command("dev")
    .option("-p, --production", "Builds the project for production.")
    .option("--port <port>", "Runs the server on a custom port. Default is 3000.")
    .option("-s, --https", "Runs the server using https.")
    .option("--dont-open-browser", "Don't open a browser window with the localhost.")
    .option("--target <target>", 'create bundles with "es5" or "module". Default target is "module".')
    .option("--publicPath <path>", 'set the public path for static assets. Default path is "/static/".')
    .description("Starts a server in development mode.")
    .action(commands_1.dev);
commander_1.default
    .command("build")
    .option("-d, --development", "Builds the project for development.")
    .option("--target <target>", 'create bundles with "es5" or "module". Default target is "module".')
    .option("--publicPath <path>", 'set the public path for static assets. Default path is "/static/".')
    .description("Builds the project for production.")
    .action(commands_1.build);
commander_1.default
    .command("serve")
    .option("--port <port>", "Runs the server on a custom port. Default is 3000.")
    .option("-s, --https", "Runs the server using https.")
    .description("Starts a server in production mode.")
    .action(commands_1.serve);
commander_1.default
    .command("subscribe [email]")
    .description("Subscribe to Frontity newsletter.")
    .action((email) => subscribe_1.default({ email }));
commander_1.default
    .command("info")
    .description("Get environment information for debugging and issue reporting.")
    .action(info_1.default);
commander_1.default.on("command:*", ([command]) => unknown_1.default(command, commander_1.default));
// Parses the arguments and adds them to the `command` object.
commander_1.default.parse(process.argv);
if (!commander_1.default.args.length)
    commander_1.default.help();
