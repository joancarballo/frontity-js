"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const ora_1 = __importDefault(require("ora"));
const chalk_1 = __importDefault(require("chalk"));
const inquirer_1 = require("inquirer");
const create_1 = __importDefault(require("../commands/create"));
const steps_1 = require("../steps");
const utils_1 = require("../utils");
exports.default = async ({ name, theme, typescript, useCwd, prompt: promptUser, }) => {
    name = name || process.env.FRONTITY_NAME;
    theme = theme || process.env.FRONTITY_THEME;
    typescript = typescript || !!process.env.FRONTITY_TYPESCRIPT;
    useCwd = useCwd || !!process.env.FRONTITY_USE_CWD;
    if (!promptUser && !name) {
        utils_1.errorLogger(new Error("You need to provide the name for the project"));
    }
    const options = {};
    if (!name) {
        const questions = [
            {
                name: "name",
                type: "input",
                message: "Enter a name for the project:",
                default: "my-frontity-project",
            },
        ];
        const answers = await inquirer_1.prompt(questions);
        options.name = answers.name;
    }
    else {
        options.name = name;
    }
    // The theme was provided as a CLI option
    if (theme) {
        options.theme = theme;
    }
    else if (promptUser) {
        // The theme was NOT provided as a CLI option
        // In this case, we prompt the user
        const questions = [
            {
                name: "theme",
                type: "list",
                message: "Pick a starter theme to clone:",
                default: "@frontity/mars-theme",
                choices: [
                    {
                        name: "@frontity/mars-theme (recommended)",
                        value: "@frontity/mars-theme",
                    },
                    {
                        name: "@frontity/twentytwenty-theme",
                        value: "@frontity/twentytwenty-theme",
                    },
                ],
            },
        ];
        const answers = await inquirer_1.prompt(questions);
        options.theme = answers.theme;
    }
    options.typescript = typescript;
    options.path = useCwd ? process.cwd() : path_1.resolve(process.cwd(), options.name);
    try {
        // Get the emitter for `create`
        const emitter = create_1.default(options);
        emitter.on("message", (message, action) => {
            if (action)
                ora_1.default.promise(action, message);
            else
                utils_1.log(message);
        });
        await emitter;
        utils_1.log(chalk_1.default.bold("\nFrontity project created.\n"));
        const subscribeQuestions = [
            {
                name: "subscribe",
                type: "confirm",
                message: "Do you want to receive framework updates by email?",
                default: false,
            },
            {
                name: "email",
                type: "input",
                message: "Please, enter your email:",
                when: (answers) => answers.subscribe,
            },
        ];
        const answers = await inquirer_1.prompt(subscribeQuestions);
        if (answers.subscribe) {
            emitter.on("subscribe", (message, action) => {
                if (action)
                    ora_1.default.promise(action, message);
                else
                    utils_1.log(message);
            });
            await steps_1.subscribe(answers.email);
            utils_1.log("\nThanks for subscribing! ðŸ˜ƒ");
        }
        else {
            utils_1.log(`\nOk, that's fine! ðŸ˜‰\nYou can subscribe at any point with ${chalk_1.default.bold.green("npx frontity subscribe <email>")}.`);
        }
        utils_1.log(`\nRun ${chalk_1.default.bold.green(`cd ${options.name} && npx frontity dev`)} and have fun! ðŸŽ‰\n\nYou can find docs at ${chalk_1.default.underline.magenta("https://docs.frontity.org/")}.\nFor technical support and assistance please join our community at ${chalk_1.default.underline.magenta("https://community.frontity.org/")}.\n`);
    }
    catch (error) {
        utils_1.errorLogger(error);
    }
};
