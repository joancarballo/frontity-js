"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = __importDefault(require("chalk"));
const eventPromised_1 = require("../utils/eventPromised");
const steps_1 = require("../steps");
const defaultOptions = {
    path: process.cwd(),
    typescript: false,
    packages: [
    // "@frontity/wp-source"
    ],
    theme: "@frontity/mars-theme",
};
const create = async (passedOptions, emit, reject) => {
    let step;
    let dirExisted;
    const emitMessage = (message, step) => {
        emit("message", message, step);
    };
    // 1. Parses and validates options.
    const options = steps_1.normalizeOptions(defaultOptions, passedOptions);
    const { name, theme, path, typescript } = options;
    process.on("SIGINT", async () => {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(dirExisted, path);
    });
    try {
        // 2. Ensures that the project dir exists and is empty.
        step = steps_1.ensureProjectDir(path);
        emitMessage(`Ensuring ${chalk_1.default.yellow(path)} directory.`, step);
        dirExisted = await step;
        // 3. Creates `README.md`
        step = steps_1.createReadme(name, path);
        emitMessage(`Creating ${chalk_1.default.yellow("README.md")}.`, step);
        await step;
        // 3. Creates `package.json`.
        step = steps_1.createPackageJson(name, theme, path);
        emitMessage(`Creating ${chalk_1.default.yellow("package.json")}.`, step);
        await step;
        // 4. Creates `frontity.settings`.
        const extension = typescript ? "ts" : "js";
        step = steps_1.createFrontitySettings(extension, name, path, theme);
        emitMessage(`Creating ${chalk_1.default.yellow(`frontity.settings.${extension}`)}.`, step);
        await step;
        // 5. Clones the theme inside `packages`.
        step = steps_1.cloneStarterTheme(theme, path);
        emitMessage(`Cloning ${chalk_1.default.green(theme)}.`, step);
        await step;
        // 6. Installs dependencies.
        step = steps_1.installDependencies(path);
        emitMessage(`Installing dependencies.`, step);
        await step;
        // 7. Download favicon.
        step = steps_1.downloadFavicon(path);
        emitMessage(`Downloading ${chalk_1.default.yellow("favicon.ico")}.`, step);
        await step;
    }
    catch (error) {
        if (typeof dirExisted !== "undefined")
            await steps_1.revertProgress(dirExisted, path);
        reject(error);
    }
};
exports.default = (options) => 
// EventPromised is a combination of EventEmitter and Promise
new eventPromised_1.EventPromised((resolve, reject, emit) => create(options, emit, reject).then(resolve));
